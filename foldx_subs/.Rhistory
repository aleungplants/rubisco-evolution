mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L475I", .before = "Genus")
## Dryopteris
L116S_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116S")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "S", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116S", .before = "Genus")
L116P_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116P")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "P", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116P", .before = "Genus")
L116K_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116K")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "K", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116K", .before = "Genus")
F282Y_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282Y")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "Y", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282Y", .before = "Genus")
F282L_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282L")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "L", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282L", .before = "Genus")
F282I_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282I")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "I", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282I", .before = "Genus")
## Pinus
S95T_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("N95S", "N95T")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "T", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "S95T", .before = "Genus")
S95A_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("N95S", "N95A")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "A", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "S95A", .before = "Genus")
C449A_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("T449C", "T449A")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "A", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449A", .before = "Genus")
C449S_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("T449C", "T449S")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "S", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449S", .before = "Genus")
neither_spinach <- bind_rows(S95T_v, A328G_v, C449A_v, C449S_v, L475I_v, L116S_d, L116P_d, L116K_d, F282Y_d, F282L_d, F282I_d, S95T_p, S95A_p, C449A_p, C449S_p)
# combine all
subs_v <- readr::read_csv(here::here("analyze/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Viburnum")
subs_d <- readr::read_csv(here::here("dryopteris_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Dryopteris")
subs_l <- readr::read_csv(here::here("limonium_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Limonium")
subs_p <- readr::read_csv(here::here("pine_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Pinus")
subs <- bind_rows(subs_v, subs_d, subs_l, subs_p) %>%
rowwise() %>%
filter(!AA %in% c(AA_Ancestral, "-")) %>%
distinct(Genus, Site, AA_Ancestral, Site, AA) %>%
mutate(Substitution = paste0(AA_Ancestral, Site, AA)) %>%
select(!contains("AA"))
ddG_all <- bind_rows(ddG, derived_spinach, neither_spinach) %>%
rename(Substitution = Mutation) %>%
right_join(subs) %>%
relocate(Site, .before = "Substitution")
readr::write_csv(ddG_all, here::here("foldx_subs/ddG_values.csv"))
View(ddg)
View(ddG)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
unfill <- function(x) {
same <- x == dplyr::lag(x)
ifelse(!is.na(same) & same, "·", x)
}
here::i_am("rubisco_tables.Rmd")
library(ggplot2)
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.line = element_blank(),
axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
H_BONDABLE <- c("S", # OH (hydroxyl)
"T", # OH
"Y", # OH
"N", # CONH2 (amide)
"Q", # CONH2
"C", # SH (thiol) - not really, but can participate in dipole interactions with other thiols
"H", # imidazole ring
"D", # -COO- (carboxylate)
"E", # -COO-
"R", # guanidine
"K") # -NH2 (amine)
# pagel_focused <- readxl::read_xlsx(here::here("table_Pagel_tests.xlsx")) %>%
#   select(Genus, Site, Substitution, FasterAA, StateFavouredbyAA) %>%
#   mutate(across(.cols = c("Genus", "Site"),
#                 .fns = ~ ifelse(. == "·", NA, .))) %>%
#   mutate(Site = as.numeric(Site)) %>%
#   tidyr::fill(Genus, Site) %>%
#   mutate(AA = stringr::str_sub(Substitution, 1, 1),
#          AA_Ancestral = stringr::str_sub(Substitution, -1, -1)) %>%
#   mutate(AA_HBondable = ifelse(AA %in% H_BONDABLE, TRUE, FALSE),
#          AA_A_HBondable = ifelse(AA_Ancestral %in% H_BONDABLE, TRUE, FALSE),
#          BondableChange = case_when(AA_HBondable == FALSE & AA_A_HBondable == TRUE ~ "Removed",
#                                     AA_HBondable == TRUE & AA_A_HBondable == FALSE ~ "Added",
#                                     .default = "None"),
#          .keep = "unused")
foldx <- readr::read_csv(here::here("foldx_subs/ddG_values.csv")) %>%
mutate(Substitution = stringr::str_replace(Substitution, "([:alpha:][:digit:]+)(.+)", "\\1→\\2")) %>%
mutate(AA_Ancestral = stringr::str_sub(Substitution, 1, 1),
AA = stringr::str_sub(Substitution, -1, -1)) %>%
mutate(AA_HBondable = ifelse(AA %in% H_BONDABLE, TRUE, FALSE),
AA_A_HBondable = ifelse(AA_Ancestral %in% H_BONDABLE, TRUE, FALSE),
BondableChange = case_when(AA_HBondable == FALSE & AA_A_HBondable == TRUE ~ "Removed",
AA_HBondable == TRUE & AA_A_HBondable == FALSE ~ "Added",
.default = "None"),
.keep = "unused")
COMPONENTS <- c("Total", "Hydrogen bonds", "Solvation, polar", "Solvation, hydrophobic")
foldx_focused <- foldx %>%
rename(Total = totalenergy,
`Hydrogen bonds` = HBond,
`Solvation, polar` = SolvationPolar,
`Solvation, hydrophobic` = SolvationHydrophobic) %>%
filter(!is.na(Total)) %>%
select(Genus, Site, Substitution, BondableChange, SD, COMPONENTS)  %>%
tidyr::pivot_longer(cols = c("Total", "Hydrogen bonds", "Solvation, polar", "Solvation, hydrophobic"),
names_to = "Parameter",
values_to = "Value") %>%
mutate(Value = Value / 8) # normalize per L subunit
residues <- foldx_focused %>%
group_by(Parameter, BondableChange) %>%
distinct(Parameter, Substitution, .keep_all = TRUE) %>%
rstatix::t_test(Value ~ 1, mu = 0,
p.adjust.method = "fdr") %>%
rstatix::add_y_position(step.increase = 0.04) %>%
mutate(p.signif = case_when(p < 0.001 ~ "***",
p < 0.01 ~ "**",
p < 0.05 ~ "*")) %>%
filter(Parameter %in% COMPONENTS) %>%
mutate(Tag = case_when(Parameter == "Hydrogen bonds" ~ "A",
Parameter == "Solvation, hydrophobic" ~ "B",
Parameter == "Solvation, polar" ~ "C",
Parameter == "Total" ~ "D"))
writexl::write_xlsx(foldx_focused, here::here("supp_table_FoldX.xlsx"))
foldx_fig <- foldx_focused %>%
full_join(residues) %>%
distinct(Parameter, Substitution, .keep_all = TRUE) %>%
filter(Parameter %in% COMPONENTS) %>%
ggplot(aes(x = BondableChange, y = Value)) +
geom_hline(aes(yintercept = 0),
linetype = "dotted",
linewidth = 0.25) +
ggbeeswarm::geom_quasirandom(width = 0.25,
size = 0.5,
shape = 21) +
stat_summary(geom = "pointrange",
position = position_nudge(x = 0.4),
size = 0.25,
linewidth = 0.4,
fatten = 2) +
geom_text(aes(y = y.position,
label = p.signif),
data = residues,
size = 6,
fontface = "bold") +
geom_text(aes(label = Tag, x = -Inf, y = Inf),
hjust = -0.5, vjust = 1.5,
fontface = "bold") +
labs(x = "Changes in oxygen, nitrogen, and/or sulfur atoms",
y = bquote(atop("← more stable       less stable →",
Delta*Delta*italic("G")[fold]~"(kcal "*mol^-1~large~subunit^-1*")"))) +
scale_y_continuous(limits = c(-5.25, 5.25), breaks = seq(-5, 5, 2.5)) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
cowplot::panel_border(color = "black", size = 0.5) +
coord_cartesian(clip = "off") +
# ggpubr::stat_pvalue_manual(residues %>% filter(Parameter %in% COMPONENTS),
#                            label = "label",
#                            tip.length = 0.02,
#                            hide.ns = FALSE) +
facet_grid(~ factor(Parameter))
ggsave(here::here("figure_FoldX.tif"), foldx_fig, width = 6.5, height = 2.5, bg = "white", dpi = 1000)
View(foldx_focused)
foldx_fig %>% filter(Site == 95)
foldx_fig %>% dplyr::filter(Site == 95)
foldx_focused %>% dplyr::filter(Site == 95)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
here::i_am("analyze/analyze.Rmd")
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
bioclim_summary <- readr::read_csv(here::here("analyze", "bioclim_summary.csv"))
aa <- readr::read_csv(here::here("analyze", "aa_at_sites_ancestral.csv"))
sites_of_interest <- readr::read_csv(here::here("analyze", "pos_selected_conv_sites.csv")) %>%
pull(Site) %>%
unique()
bioclim_aa <- inner_join(bioclim_summary, aa, by = "ShortName") %>%
filter(!is.na(Ancestral),
Site %in% sites_of_interest) %>%
mutate(AA = reorder(AA, desc(Ancestral))) %>%
dplyr::select(!contains(c("_median", "_se", "_q10", "_q90"))) %>%
tidyr::pivot_longer(cols = contains(c("_mean", "PC1")),
names_to = "ClimateVariable",
values_to = "ClimateValue") %>%
group_by(ClimateVariable) %>%
arrange(Site, Ancestral, ClimateValue, .by_group = TRUE) %>%
distinct(Site, AA, ClimateVariable, ClimateValue, .keep_all = TRUE)
ancestral_aa <- bioclim_aa %>%
ungroup() %>%
select(Site, AA_Ancestral) %>%
unique()
bioclim_aa_summary <- bioclim_aa %>%
group_by(ClimateVariable, Site, AA) %>%
summarise(across(.cols = ClimateValue,
.fns = list(n = length,
Mean = mean,
SE = ~sd(.)/length(.),
SD = ~sd(.)),
.names = "{.col}{.fn}"))
readr::write_csv(bioclim_aa_summary, here::here("analyze", "bioclim_aa_summary.csv"))
bioclim_aa_summary
pairwise_tests <- bioclim_aa %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
pairwise_tests
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
pairwise_tests <- bioclim_aa %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
bioclim_aa
bioclim_aa %>% filter(n < 2)
bioclim_aa %>% dplyr::filter(n<)
bioclim_aa %>% dplyr::filter(n<2)
bioclim_aa %>% ungroup() %>%dplyr::filter(n<2)
View(bioclim_aa_summary)
pairwise_tests <- bioclim_aa %>%
filter(ClimateValuen >= 3) %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
glimpse(bioclim_aa)
pairwise_tests <- bioclim_aa %>%
filter(ClimateVariable != coordinatePrecision) %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
glimpse(bioclim_aa)
pairwise_tests <- bioclim_aa %>%
filter(ClimateVariable != coordinatePrecision_mean) %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
View(bioclim_aa_summary)
pairwise_tests <- bioclim_aa %>%
filter(ClimateVariable != "coordinatePrecision_mean") %>%
group_by(ClimateVariable, Site) %>%
rstatix::t_test(formula = ClimateValue ~ AA, p.adjust.method =  "bonferroni", ref.group = "all") %>%
rstatix::add_significance(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "")) %>%
# filter(p.adj.signif != "ns") %>%
group_by(ClimateVariable) %>%
rstatix::add_xy_position(fun = "mean_se", x = "AA", scales = "free", step.increase = 0) %>%
full_join(., ancestral_aa, by = "Site") %>%
mutate(AA = group1,
Ancestral = ifelse(AA == AA_Ancestral, TRUE, FALSE),
ClimateValue = y.position)
pairwise_tests
pairwise_tests %>% filter(p < 0.05)
pairwise_tests %>% filter(p.adj < 0.05)
# PHYLOGENETIC ANOVA
tree <- ape::read.tree(here::here("csubst", "radseq_pruned_csubst.tre"))
stats <- bioclim_aa %>%
filter(ClimateVariable != "coordinatePrecision_mean") %>%
select(ShortName, Site, AA, ClimateVariable, ClimateValue) %>%
mutate(ClimateValue = sign(ClimateValue) * (abs(ClimateValue))^(1/3)) %>%
group_by(Site, ClimateVariable) %>%
tidyr::nest(.key = "Data") %>%
mutate(Tree = purrr::map(Data, ~ ape::keep.tip(tree, .$ShortName))) %>%
mutate(Groups = purrr::map(Data, ~ select(., "ShortName", "AA") %>% tibble::deframe())) %>%
mutate(ResponseVar = purrr::map(Data, ~ select(., "ShortName", "ClimateValue") %>% tibble::deframe())) %>% # select + deframe is more readable than setNames
rowwise() %>%
# head(1) %>% # for testing with a smaller dataframe
# mutate(ANOVAP = phytools::phylANOVA(tree = purrr::pluck(Tree),
#                                    x = purrr::pluck(Groups) %>% droplevels(), # droplevels will drop the unused levels
#                                    y = purrr::pluck(ResponseVar),
#                                    posthoc = TRUE,
#                                    nsim = 1000,
#                                    p.adj = "none")$Pf) %>%  # Pt attribute has the adjusted P values
mutate(PostHoc = phytools::phylANOVA(tree = purrr::pluck(Tree),
x = purrr::pluck(Groups) %>% droplevels(), # droplevels will drop the unused levels
y = purrr::pluck(ResponseVar),
posthoc = TRUE,
nsim = 1000,
p.adj = "none")$Pt %>%  # Pt attribute has the adjusted P values
as_tibble(rownames = "group1") %>%
list()) %>% # list puts the tibble into an object of length 1 (to fit into one cell)
mutate(PostHoc = tidyr::pivot_longer(PostHoc, cols = !contains("group"), names_to = "group2", values_to = "p") %>%
list()) %>% # turn table with combos of groups and p values to group1, group2, p
tidyr::unnest(PostHoc) %>%
rowwise() %>%
filter(group1 != group2) %>%
mutate(groups = stringr::str_flatten(sort(c(group1, group2)), collapse = "-"), .before = "p") %>%
distinct(groups, .keep_all = TRUE) %>%
group_by(Site, ClimateVariable) %>%
mutate(p.adj = p.adjust(p, method = "fdr"))
stats_adj <- stats %>%
select(Site, ClimateVariable, groups, p.adj) %>%
group_by(Site, ClimateVariable) %>%
tidyr::nest(.key = "PostHoc") %>%
mutate(PostHoc = purrr::map(PostHoc, ~ tibble::deframe(.))) %>%
mutate(Letters = purrr::map(PostHoc, ~ multcompView::multcompLetters(.)$Letters %>%
as_tibble(rownames = "AA") %>%
rename(Letter = value))) %>%
tidyr::unnest(Letters) %>%
rowwise() %>%
mutate(Signif = any(purrr::pluck(PostHoc) < 0.05)) %>%
mutate(Letter = ifelse(Signif, Letter, ""))
readr::write_csv(stats_adj, here::here("analyze", "phy_anova.csv"))
stats_adj
stats_adj %>% filter(Signif)
pairwise_tests
pairwise_tests %>% filter(p.adj < 0.05)
