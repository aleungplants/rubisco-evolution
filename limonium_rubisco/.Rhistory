filter(Site == SITE) %>%
select(!Site) %>%
mutate(Ancestral = ifelse(Ancestral, "0", "1"))
desert_species <- intersect(desert$Species, aa_site$Species) # get common species
desert_fit_ER <- fitPagel(ape::keep.tip(tree, desert_species), # prune tree
aa_site %>%
filter(Species %in% desert_species) %>%
tibble::deframe(), # have to turn into named list
desert %>%
filter(Species %in% desert_species) %>%
tibble::deframe(),
dep.var = "x",
model = "ER")
desert_fit_SYM <- fitPagel(ape::keep.tip(tree, desert_species), # prune tree
aa_site %>%
filter(Species %in% desert_species) %>%
tibble::deframe(), # have to turn into named list
desert %>%
filter(Species %in% desert_species) %>%
tibble::deframe(),
dep.var = "x",
model = "SYM")
desert_fit_ARD <- fitPagel(ape::keep.tip(tree, desert_species), # prune tree
aa_site %>%
filter(Species %in% desert_species) %>%
tibble::deframe(), # have to turn into named list
desert %>%
filter(Species %in% desert_species) %>%
tibble::deframe(),
dep.var = "x",
model = "ARD")
desert_AICs <- tibble::tibble(model = "ER",
AIC_dep = desert_fit_ER$dependent.AIC,
AIC_indep = desert_fit_ER$independent.AIC) %>%
add_row(model = "SYM",
AIC_dep = desert_fit_SYM$dependent.AIC,
AIC_indep = desert_fit_SYM$independent.AIC) %>%
add_row(model = "ARD",
AIC_dep = desert_fit_ARD$dependent.AIC,
AIC_indep = desert_fit_ARD$independent.AIC)
best_model <- desert_AICs %>%
slice_min(AIC_dep, n = 1) %>%
pull(model)
if (best_model[1] == "ARD") {
best_desert_fit <- desert_fit_ARD
} else if (best_model[1] == "SYM") {
best_desert_fit <- desert_fit_SYM
} else {
best_desert_fit <- desert_fit_ER
}
desert_lrts <- desert_lrts %>%
add_row(Site = SITE,
model = best_model[1],
deltaQ_Ancestral = best_desert_fit$dependent.Q["0|a", "0|b"]-best_desert_fit$dependent.Q["0|b", "0|a"],
deltaQ_Derived = best_desert_fit$dependent.Q["1|a", "1|b"]-best_desert_fit$dependent.Q["1|b", "1|a"],
StateFavoured = case_when(deltaQ_Derived > 0 ~ "desert",
deltaQ_Derived < 0 ~ "non-desert",
deltaQ_Derived == 0 ~ "symmetrical"),
AIC_Independent = best_desert_fit$independent.AIC[1],
AIC_Dependent = best_desert_fit$dependent.AIC[1],
deltaAIC = AIC_Independent-AIC_Dependent,
p = best_desert_fit$P[1])
writexl::write_xlsx(desert_lrts, here::here("pagels_test_desert_reversed.xlsx"))
}
library(dplyr)
library(ggplot2)
here::i_am("co2_gas_ex.Rmd")
theme_set(cowplot::theme_cowplot() +
theme(axis.line = element_blank(),
legend.title = element_blank(),
strip.background = element_blank()))
photosynthetic_types <- readxl::read_xlsx(here::here("data", "photosynthetic_types.xlsx")) %>%
mutate(Species = paste(stringr::str_sub(Species, 1, 1), stringr::word(Species, 2), sep = ". "),
PhotosyntheticType = factor(PhotosyntheticType, levels = c("C3", "PK", "sub-C2", "C2", "C3 x C2")))
SP_BREAKS <- c("F. cronquistii", "F. pringlei", "H. glutinosa", "T. forrestii",
"S. laxum", "H. isocalycia", "F. sonorensis", "F. angustifolia",
"T. cristatus", "H. aturensis", "S. hians")
cstars <- readr::read_csv(here::here("data/processed_data/cstars.csv"))
cstar_gamma_data <- cstar_gamma_rep_data %>%
group_by(PhotosyntheticType, Species, GrowthCO2ppm) %>%
summarise(across(.cols = c("Gamma", "Cstar", "Rd"),
.fns = list(Mean = mean,
SE = ~sd(.)/sqrt(n())))) %>%
mutate(SpeciesLabel = paste(stringr::str_sub(Species, 1, 1),
stringr::word(Species, 2) %>% stringr::str_sub(1, 4),
sep = "."),
GrowthCO2ppm = as.factor(GrowthCO2ppm))
# add_row(Species = "S. hians", Plant = 5, GrowthCO2ppm = 200, Cstar = 3) %>% # power analysis
# add_row(Species = "S. hians", Plant = 5, GrowthCO2ppm = 800, Cstar = 16) %>%
# add_row(Species = "S. hians", Plant = 6, GrowthCO2ppm = 200, Cstar = 3) %>%
# add_row(Species = "S. hians", Plant = 6, GrowthCO2ppm = 800, Cstar = 16) %>%
# add_row(Species = "T. cristatus", Plant = 5, GrowthCO2ppm = 200, Cstar = 8) %>%
# add_row(Species = "T. cristatus", Plant = 5, GrowthCO2ppm = 800, Cstar = 20) %>%
# add_row(Species = "T. cristatus", Plant = 6, GrowthCO2ppm = 200, Cstar = 8) %>%
# add_row(Species = "T. cristatus", Plant = 6, GrowthCO2ppm = 800, Cstar = 20)
gammas <- readr::read_csv(here::here("data/processed_data/gammas.csv"))
cstar_gamma_data <- cstar_gamma_rep_data %>%
group_by(PhotosyntheticType, Species, GrowthCO2ppm) %>%
summarise(across(.cols = c("Gamma", "Cstar", "Rd"),
.fns = list(Mean = mean,
SE = ~sd(.)/sqrt(n())))) %>%
mutate(SpeciesLabel = paste(stringr::str_sub(Species, 1, 1),
stringr::word(Species, 2) %>% stringr::str_sub(1, 4),
sep = "."),
GrowthCO2ppm = as.factor(GrowthCO2ppm))
cstar_gamma_rep_data <- full_join(cstars %>% select(Species, Plant, GrowthCO2ppm, Cstar, Rd),
gammas %>% select(Species, Plant, GrowthCO2ppm, Gamma)) %>%
left_join(photosynthetic_types) %>%
mutate(SpeciesLabel = paste(stringr::str_sub(Species, 1, 1),
stringr::word(Species, 2) %>% stringr::str_sub(1, 4),
sep = "."),
ID = stringr::str_c(SpeciesLabel, Plant),
GrowthCO2ppm = as.factor(GrowthCO2ppm))
cstar_gamma_data <- cstar_gamma_rep_data %>%
group_by(PhotosyntheticType, Species, GrowthCO2ppm) %>%
summarise(across(.cols = c("Gamma", "Cstar", "Rd"),
.fns = list(Mean = mean,
SE = ~sd(.)/sqrt(n())))) %>%
mutate(SpeciesLabel = paste(stringr::str_sub(Species, 1, 1),
stringr::word(Species, 2) %>% stringr::str_sub(1, 4),
sep = "."),
GrowthCO2ppm = as.factor(GrowthCO2ppm))
cstar_gamma_data
cstar_gamma_data <- cstar_gamma_data %>% select(!contains("Gamma")) %>% select(!containts("Rd")) %>% select(!SpeciesLabel)
cstar_gamma_data <- cstar_gamma_data %>% select(!contains("Gamma")) %>% select(!contains("Rd")) %>% select(!SpeciesLabel)
cstar_gamma_data
cstar_gamma_data <- select(!c(PhotosyntheticType, CstarSE))
cstar_gamma_data <- select(!c(PhotosyntheticType, CstarSE))
cstar_gamma_data <- cstar_gamma_data %>% select(!c(PhotosyntheticType, CstarSE))
cstar_gamma_data <- cstar_gamma_data %>% select(!c(PhotosyntheticType, Cstar_SE))
cstar_gamma_data <- cstar_gamma_data %>% tidyr::pivot_wider(cols = "Cstar_Mean", names_from = "GrowthCO2ppm")
cstar_gamma_data <- cstar_gamma_data %>% tidyr::pivot_wider(values_from = "Cstar_Mean", names_from = "GrowthCO2ppm")
cstar_gamma_data
cstar_gamma_data <- cstar_gamma_data %>% mutate(CstarDiff = `800`-`200`)
cstar_gamma_data
cstar_gamma_data <- cstar_gamma_data %>% mutate(CstarRelDiff = `800`/`200`)
cstar_gamma_data
library(dplyr)
here::i_am("12. merge_site_data.R")
# directory list have fixed (must match fully) pattern of "csubst_site.branch_id"
dir_list <- dir(here::here("site"), pattern = "^csubst_site.branch_id")
# function that splits directory name to get the branch numbers, then reads each tsv in each directory. puts in the branch numbers into the data frame before returning it
read_csubst_site <- function(dirname) {
branches <- stringr::word(dirname, sep = stringr::fixed("_id"), 2)
branch_1 <- stringr::word(branches, sep = ",", 1)
branch_2 <- stringr::word(branches, sep = ",", 2)
data <- readr::read_tsv(here::here("site", dirname, "csubst_site.tsv")) %>%
mutate(branch_id = branches, .before = "codon_site_alignment") %>%
tidyr::separate(col = branch_id, into = c("branch_id_1", "branch_id_2"), sep = ",") %>%
rename_with(~ stringr::str_replace(., paste0("_", branch_1, "(?!\\d)"), "_1"), !contains("branch_id")) %>%
rename_with(~ stringr::str_replace(., paste0("_", branch_2, "(?!\\d)"), "_2"), !contains("branch_id"))
return(data)
}
test_file <- dir_list[1]
# dirname <- test_file
test_data <- read_csubst_site(test_file)
# run the function across all directories in the site.
merged <- purrr::map_dfr(dir_list, ~ read_csubst_site(.))
# get taxa from each branch
csubst_tree <- ape::read.tree(here::here("branch/csubst_tree.nwk"))
koutroumpa_tree <- ape::read.tree(here::here("koutroumpa_tree_csubst.tre"))
branches <- readr::read_tsv(here::here("branch/csubst_b.tsv")) %>%
rowwise() %>%
mutate(
branch_name = ifelse(
stringr::str_detect(branch_name, "^Node"), #if contains Node
purrr::keep(csubst_tree$node.label, .p = stringr::str_detect, pattern = stringr::fixed(paste(branch_name, "|", sep =""))), # look in the tree node labels for a partial match
branch_name
)
)
branches_tips <- branches %>%
filter(!stringr::str_detect(branch_name, "^Node")) %>%
mutate(taxa = branch_name) %>% # otherwise just branch_name as taxon name
dplyr::select(branch_name, branch_id, taxa) %>%
rowwise() %>%
mutate(node = branch_name)
branches_nodes <- branches %>%
filter(stringr::str_detect(branch_name, "^Node")) %>%
mutate(taxa = list(ape::extract.clade(csubst_tree, branch_name)$tip.label)) %>%
group_by(branch_name, branch_id) %>%
summarise(taxa = purrr::map(taxa, ~ stringr::word(., 1, sep = stringr::fixed("|")))) %>%
mutate(taxa = purrr::list_merge(taxa)) %>%
rowwise() %>%
mutate(node = list(ape::getMRCA(koutroumpa_tree, taxa))) %>% # get node numbers from Jin 2021 PNAS tree
tidyr::unnest(node)
branches_all <- rbind(branches_tips, branches_nodes) %>%
dplyr::select(!taxa)
readr::write_csv(branches_all, here::here("branch/branch_id_nodes.csv"))
# add node numbers to merged data
node1 <- branches_all %>%
rename(branch_id_1 = branch_id, node1 = node) %>%
mutate(branch_id_1 = as.character(branch_id_1))
node2 <- branches_all %>%
rename(branch_id_2 = branch_id, node2 = node) %>%
mutate(branch_id_2 = as.character(branch_id_2))
merged_nodes <- full_join(merged, node1, by = "branch_id_1") %>%
full_join(node2, by = "branch_id_2") %>%
relocate(c(node1, node2), .after = "branch_id_2")
# save
readr::write_csv(merged_nodes, here::here("site/csubst_site_merged.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
here::i_am("14. analyze.Rmd")
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
library(phytools)
dep_y_pagel <- readxl::read_xlsx(here::here("pagels_test_desert_0.xlsx")) %>%
rowwise() %>%
mutate(Min_AIC = min(AIC_Dependent, AIC_Independent)) %>%
select(Substitution, Min_AIC, p)
dep_x_pagel <- readxl::read_xlsx(here::here("pagels_test_desert_reverse_0.xlsx"))  %>%
rowwise() %>%
mutate(Min_AIC_Re = min(AIC_Dependent, AIC_Independent)) %>%
rename(p_Re = p) %>%
select(Substitution, Min_AIC_Re, p_Re)
best_models <- full_join(dep_y_pagel, dep_x_pagel) %>%
mutate(BestDepVar = case_when(Min_AIC < Min_AIC_Re & p < 0.05 ~ "y",
Min_AIC > Min_AIC_Re & p_Re < 0.05 ~ "x")) %>%
filter(!is.na(BestDepVar)) %>%
distinct(Substitution) %>%
mutate(Site = stringr::str_extract(Substitution, "[:digit:]+") %>% as.numeric())
sites_of_interest <- best_models %>%
pull(Site) %>%
unique()
subs_of_interest <- best_models %>%
pull(Substitution) %>%
unique()
aa <- readr::read_csv(here::here("aa_at_sites_ancestral.csv")) %>%
filter(Site %in% sites_of_interest) %>%
filter(AA != "-") %>%
select(Species, Site, AA) %>%
full_join(best_models) %>%
mutate(Ancestral = ifelse(AA == stringr::str_sub(Substitution, -1, -1), "1", "0")) %>%
select(Species, Substitution, Ancestral)
tree <- ape::read.tree(here::here("koutroumpa_tree_csubst.tre")) %>%
bind.tip(., tip.label = "ROOT", edge.length = 0, where = Ntip(.) + 1)
desert <- readr::read_csv(here::here("gbif_data", "desert_summary.csv")) %>%
group_by(Species) %>%
summarise(Desert = ifelse(Desert == "non-desert", "0", "1"))
SUBSTITUTION = "D340E"
OVERWRITE = TRUE
for (SUBSTITUTION in subs_of_interest) {
file_list <- list.files(here::here("plots/simmaps"))
if (OVERWRITE == FALSE & paste("desert", SUBSTITUTION, ".svg", sep = "") %in% file_list) {
print("File exists, continuing")
next
}
print(paste("Doing site", SUBSTITUTION))
aa_site <- aa %>%
filter(Substitution == SUBSTITUTION) %>%
select(!Substitution)
common_species <- intersect(pull(desert, Species), pull(aa_site, Species))
pruned_tree <- tree %>% ape::keep.tip(common_species)
ER_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = c("0" = 1, "1" = 0))
ARD_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = c("0" = 1, "1" = 0))
if (AIC(ER_aa) < AIC(ARD_aa)) {
print("AA: Choosing ER")
sim_tree_aa <- simmap(ER_aa, nsim = 100)
} else {
print("AA: Choosing ARD")
sim_tree_aa <- simmap(ARD_aa, nsim = 100)
}
dmap_aa <- densityMap(sim_tree_aa)
dmap_aa_color <- setMap(dmap_aa, c("black", "#fde725"))
ER_desert <- fitMk(pruned_tree,
desert %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = "fitzjohn")
ARD_desert <- fitMk(pruned_tree,
desert %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = "fitzjohn")
if (AIC(ER_desert) < AIC(ARD_desert)) {
print("desert: Choosing ER")
sim_tree_desert <- simmap(ER_desert, nsim = 100)
} else {
print("desert: Choosing ARD")
sim_tree_desert <- simmap(ARD_desert, nsim = 100)
}
dmap_desert <- densityMap(sim_tree_desert)
dmap_desert_color <- setMap(dmap_desert, c("black", "#93e6e3"))
svg(here::here("plots/simmaps", paste( "desert", SUBSTITUTION, ".svg", sep = "")),
height = 5, width = 5)
layout(matrix(1:2,1,2),widths=c(1,1))
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(dmap_aa_color, lwd = 2, ftype="off", legend = FALSE, no.margin=T)
plot(dmap_desert_color, lwd = 2, direction="leftwards", ftype="off", legend = FALSE,no.margin=T)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
here::i_am("14. analyze.Rmd")
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
library(phytools)
dep_y_pagel <- readxl::read_xlsx(here::here("pagels_test_desert_0.xlsx")) %>%
rowwise() %>%
mutate(Min_AIC = min(AIC_Dependent, AIC_Independent)) %>%
select(Substitution, Min_AIC, p)
dep_x_pagel <- readxl::read_xlsx(here::here("pagels_test_desert_reverse_0.xlsx"))  %>%
rowwise() %>%
mutate(Min_AIC_Re = min(AIC_Dependent, AIC_Independent)) %>%
rename(p_Re = p) %>%
select(Substitution, Min_AIC_Re, p_Re)
best_models <- full_join(dep_y_pagel, dep_x_pagel) %>%
mutate(BestDepVar = case_when(Min_AIC < Min_AIC_Re & p < 0.05 ~ "y",
Min_AIC > Min_AIC_Re & p_Re < 0.05 ~ "x")) %>%
filter(!is.na(BestDepVar)) %>%
distinct(Substitution) %>%
mutate(Site = stringr::str_extract(Substitution, "[:digit:]+") %>% as.numeric())
sites_of_interest <- best_models %>%
pull(Site) %>%
unique()
subs_of_interest <- best_models %>%
pull(Substitution) %>%
unique()
aa <- readr::read_csv(here::here("aa_at_sites_ancestral.csv")) %>%
filter(Site %in% sites_of_interest) %>%
filter(AA != "-") %>%
select(Species, Site, AA) %>%
full_join(best_models) %>%
mutate(Ancestral = ifelse(AA == stringr::str_sub(Substitution, -1, -1), "1", "0")) %>%
select(Species, Substitution, Ancestral)
tree <- ape::read.tree(here::here("koutroumpa_tree_csubst.tre")) %>%
bind.tip(., tip.label = "ROOT", edge.length = 0, where = Ntip(.) + 1)
desert <- readr::read_csv(here::here("gbif_data", "desert_summary.csv")) %>%
group_by(Species) %>%
summarise(Desert = ifelse(Desert == "non-desert", "0", "1"))
SUBSTITUTION = "D340E"
OVERWRITE = TRUE
for (SUBSTITUTION in subs_of_interest) {
file_list <- list.files(here::here("plots/simmaps"))
if (OVERWRITE == FALSE & paste("desert", SUBSTITUTION, ".svg", sep = "") %in% file_list) {
print("File exists, continuing")
next
}
print(paste("Doing site", SUBSTITUTION))
aa_site <- aa %>%
filter(Substitution == SUBSTITUTION) %>%
select(!Substitution)
common_species <- intersect(pull(desert, Species), pull(aa_site, Species))
pruned_tree <- tree %>% ape::keep.tip(common_species)
ER_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = c("0" = 1, "1" = 0))
ARD_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = c("0" = 1, "1" = 0))
if (AIC(ER_aa) < AIC(ARD_aa)) {
print("AA: Choosing ER")
sim_tree_aa <- simmap(ER_aa, nsim = 100)
} else {
print("AA: Choosing ARD")
sim_tree_aa <- simmap(ARD_aa, nsim = 100)
}
dmap_aa <- densityMap(sim_tree_aa)
dmap_aa_color <- setMap(dmap_aa, c("black", "#fde725"))
ER_desert <- fitMk(pruned_tree,
desert %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = "fitzjohn")
ARD_desert <- fitMk(pruned_tree,
desert %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = "fitzjohn")
if (AIC(ER_desert) < AIC(ARD_desert)) {
print("desert: Choosing ER")
sim_tree_desert <- simmap(ER_desert, nsim = 100)
} else {
print("desert: Choosing ARD")
sim_tree_desert <- simmap(ARD_desert, nsim = 100)
}
dmap_desert <- densityMap(sim_tree_desert)
dmap_desert_color <- setMap(dmap_desert, c("black", "#93e6e3"))
svg(here::here("plots/simmaps", paste( "desert", SUBSTITUTION, ".svg", sep = "")),
height = 5, width = 5)
layout(matrix(1:2,1,2),widths=c(1,1))
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(dmap_aa_color, lwd = 2, ftype="off", legend = FALSE, no.margin=T)
plot(dmap_desert_color, lwd = 2, direction="leftwards", ftype="off", legend = FALSE,no.margin=T)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
here::i_am("14. analyze.Rmd")
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
library(phytools)
dep_y_pagel <- readxl::read_xlsx(here::here("pagels_test_rainforest_0.xlsx")) %>%
rowwise() %>%
mutate(Min_AIC = min(AIC_Dependent, AIC_Independent)) %>%
select(Substitution, Min_AIC, p)
dep_x_pagel <- readxl::read_xlsx(here::here("pagels_test_rainforest_reverse_0.xlsx"))  %>%
rowwise() %>%
mutate(Min_AIC_Re = min(AIC_Dependent, AIC_Independent)) %>%
rename(p_Re = p) %>%
select(Substitution, Min_AIC_Re, p_Re)
best_models <- full_join(dep_y_pagel, dep_x_pagel) %>%
mutate(BestDepVar = case_when(Min_AIC < Min_AIC_Re & p < 0.05 ~ "y",
Min_AIC > Min_AIC_Re & p_Re < 0.05 ~ "x")) %>%
filter(!is.na(BestDepVar)) %>%
distinct(Substitution) %>%
mutate(Site = stringr::str_extract(Substitution, "[:digit:]+") %>% as.numeric())
sites_of_interest <- best_models %>%
pull(Site) %>%
unique()
subs_of_interest <- best_models %>%
pull(Substitution) %>%
unique()
aa <- readr::read_csv(here::here("aa_at_sites_ancestral.csv")) %>%
filter(Site %in% sites_of_interest) %>%
filter(AA != "-") %>%
select(Species, Site, AA) %>%
full_join(best_models) %>%
mutate(Ancestral = ifelse(AA == stringr::str_sub(Substitution, -1, -1), "1", "0")) %>%
select(Species, Substitution, Ancestral)
tree <- ape::read.tree(here::here("dryopteris_csubst.tre")) %>%
bind.tip(., tip.label = "ROOT", edge.length = 0, where = Ntip(.) + 1)
rainforest <- readr::read_csv(here::here("gbif_data", "rainforest_summary.csv")) %>%
group_by(Species) %>%
summarise(Rainforest = ifelse(Rainforest == "non-rainforest", "0", "1"))
SUBSTITUTION = "F282H"
OVERWRITE = TRUE
for (SUBSTITUTION in subs_of_interest) {
file_list <- list.files(here::here("plots/simmaps"))
if (OVERWRITE == FALSE & paste("rainforest", SUBSTITUTION, ".svg", sep = "") %in% file_list) {
print("File exists, continuing")
next
}
print(paste("Doing site", SUBSTITUTION))
aa_site <- aa %>%
filter(Substitution == SUBSTITUTION) %>%
select(!Substitution)
common_species <- intersect(pull(rainforest, Species), pull(aa_site, Species))
pruned_tree <- tree %>% ape::keep.tip(common_species)
ER_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = c("0" = 1, "1" = 0))
ARD_aa <- fitMk(pruned_tree,
aa_site %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = c("0" = 1, "1" = 0))
if (AIC(ER_aa) < AIC(ARD_aa)) {
print("AA: Choosing ER")
sim_tree_aa <- simmap(ER_aa, nsim = 100)
} else {
print("AA: Choosing ARD")
sim_tree_aa <- simmap(ARD_aa, nsim = 100)
}
dmap_aa <- densityMap(sim_tree_aa)
dmap_aa_color <- setMap(dmap_aa, c("black", "#fde725"))
ER_rainforest <- fitMk(pruned_tree,
rainforest %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ER",
pi = "fitzjohn")
ARD_rainforest <- fitMk(pruned_tree,
rainforest %>% filter(Species %in% common_species) %>% tibble::deframe(),
model = "ARD",
pi = "fitzjohn")
if (AIC(ER_rainforest) < AIC(ARD_rainforest)) {
print("rainforest: Choosing ER")
sim_tree_rainforest <- simmap(ER_rainforest, nsim = 100)
} else {
print("rainforest: Choosing ARD")
sim_tree_rainforest <- simmap(ARD_rainforest, nsim = 100)
}
dmap_rainforest <- densityMap(sim_tree_rainforest)
dmap_rainforest_color <- setMap(dmap_rainforest, c("black", "#abadd7"))
svg(here::here("plots/simmaps", paste( "rainforest", SUBSTITUTION, ".svg", sep = "")),
height = 5, width = 5)
layout(matrix(1:2,1,2),widths=c(1,1))
par(oma=c(0,0,0,0))
par(mar=c(0,0,0,0))
plot(dmap_aa_color, lwd = 2, ftype="off", legend = FALSE, no.margin=T)
plot(dmap_rainforest_color, lwd = 2, direction="leftwards", ftype="off", legend = FALSE,no.margin=T)
dev.off()
}
