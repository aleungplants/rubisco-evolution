mutations_list <- readr::read_lines(here::here("foldx5_1/individual_list.txt")) %>%
stringr::word(1, sep = ",") %>%
stringr::str_sub_all(c(1, 3), c(1, -1))
mutations_list <- readr::read_lines(here::here("foldx5_1/individual_list_mutations.txt")) %>%
stringr::word(1, sep = ",") %>%
stringr::str_sub_all(c(1, 3), c(1, -1))
library(dplyr)
here::i_am("foldx5_1/read_foldx.R")
mutations_list <- readr::read_lines(here::here("foldx5_1/individual_list_mutations.txt")) %>%
stringr::word(1, sep = ",") %>%
stringr::str_sub_all(c(1, 3), c(1, -1))
mutations <- purrr::map_chr(mutations_list, ~ paste0(.[1], .[2]))
ddG <- readr::read_tsv(here::here("foldx5_1/Average_8ruc-assembly-clean_Repair.fxout"), skip = 8) %>%
rename_with(~stringr::str_remove_all(., " ")) %>%
mutate(Genus = case_when(row_number() %>% between(1, 26) ~ "Viburnum",
row_number() %>% between(27, 38) ~ "Dryopteris",
row_number() %>% between(39, 43) ~ "Limonium",
row_number() %>% between(43, 60) ~ "Pinus"),
Mutation = mutations, .before = "Pdb") %>%
mutate(across(.cols = !c("Genus", "Mutation", "Pdb"),
.fns = ~ plyr::round_any(., 0.01))) %>%
mutate(HBond = BackboneHbond + SidechainHbond,
Clashes = VanderWaalsclashes + torsionalclash + backboneclash,
.after = totalenergy,
.keep = "unused") %>%
select(Genus, Mutation, totalenergy, SD, HBond, Clashes, VanderWaals, Electrostatics, SolvationPolar, SolvationHydrophobic)
mutations <- purrr::map_chr(mutations_list, ~ paste0(.[1], .[2]))
mutations
library(dplyr)
here::i_am("foldx5_1/read_foldx.R")
mutations_list <- readr::read_lines(here::here("foldx5_1/individual_list_mutations.txt")) %>%
stringr::word(1, sep = ",") %>%
stringr::str_sub_all(c(1, 3), c(1, -1))
mutations <- purrr::map_chr(mutations_list, ~ paste0(.[1], .[2]))
ddG <- readr::read_tsv(here::here("foldx5_1/Average_8ruc-assembly-clean_Repair.fxout"), skip = 8) %>%
rename_with(~stringr::str_remove_all(., " ")) %>%
mutate(Genus = case_when(row_number() %>% between(1, 26) ~ "Viburnum",
row_number() %>% between(27, 38) ~ "Dryopteris",
row_number() %>% between(39, 43) ~ "Limonium",
row_number() %>% between(43, 60) ~ "Pinus"),
Mutation = mutations, .before = "Pdb") %>%
mutate(across(.cols = !c("Genus", "Mutation", "Pdb"),
.fns = ~ plyr::round_any(., 0.01))) %>%
mutate(HBond = BackboneHbond + SidechainHbond,
Clashes = VanderWaalsclashes + torsionalclash + backboneclash,
.after = totalenergy,
.keep = "unused") %>%
select(Genus, Mutation, totalenergy, SD, HBond, Clashes, VanderWaals, Electrostatics, SolvationPolar, SolvationHydrophobic)
# Derived AA == spinach AA
##Viburnum
S76N <- ddG %>%
filter(Genus == "Viburnum", Mutation == "N76S") %>%
mutate(Mutation = "S76N",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
I225L <- ddG %>%
filter(Genus == "Viburnum", Mutation == "L225I") %>%
mutate(Mutation = "I225L",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
E249D <- ddG %>%
filter(Genus == "Viburnum", Mutation == "D249E") %>%
mutate(Mutation = "E249D",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
A328S <- ddG %>%
filter(Genus == "Viburnum", Mutation == "S328A", row_number() == 18) %>%
mutate(Mutation = "A328S",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
E340D <- ddG %>%# forgot to add this for viburnum, but shouldn't matter if I use limonium one
filter(Mutation == "D340E") %>%
mutate(Mutation = "E340D",
Genus = "Viburnum",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
##Dryopteris
L116M <- ddG %>%
filter(Genus == "Dryopteris", Mutation == "M116L") %>%
mutate(Mutation = "L116M",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
A262V <- ddG %>%
filter(Genus == "Dryopteris", Mutation == "V262A") %>%
mutate(Mutation = "A262V",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
F282H <- ddG %>%
filter(Genus == "Dryopteris", Mutation == "H282F") %>%
mutate(Mutation = "F282H",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
##Limonium
T43S <- ddG %>%
filter(Genus == "Limonium", Mutation == "S43T") %>%
mutate(Mutation = "T43S",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
I309M <- ddG %>%
filter(Genus == "Limonium", Mutation == "M309I") %>%
mutate(Mutation = "I309M",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
##Pinus
S95N <- ddG %>%
filter(Genus == "Pinus", Mutation == "N95S") %>%
mutate(Mutation = "S95N",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
N226Y <- ddG %>%
filter(Genus == "Pinus", Mutation == "Y226N") %>%
mutate(Mutation = "N226Y",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
V471A <- ddG %>%
filter(Genus == "Pinus", Mutation == "A471V") %>%
mutate(Mutation = "V471A",
across(.cols = !c(Genus, Mutation, SD),
.fns = ~ . * -1))
derived_spinach <- bind_rows(S76N, I225L, E249D, A328S, E340D, L116M, A262V, F282H, T43S, I309M, S95N, N226Y, V471A)
# Neither AA == spinach AA
## Viburnum
S95T_v <- ddG %>%
filter(Genus == "Viburnum", Mutation %in% c("N95S", "N95T")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "T", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "S95T", .before = "Genus")
A328G_v <- ddG %>%
filter(Genus == "Viburnum", Mutation %in% c("S328A", "S328G"), row_number() %in% c(19, 20)) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "G", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "A328G", .before = "Genus")
C449A_v <- ddG %>% # forgot to add this for viburnum, but shouldn't matter if I use pinus one
filter(Genus == "Pinus", Mutation %in% c("T449C", "T449A")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "A", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449A", .before = "Genus") %>%
mutate(Genus = "Viburnum")
C449S_v <- ddG %>%
filter(Genus == "Viburnum", Mutation %in% c("T449S", "T449C")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "S", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449S", .before = "Genus")
L475I_v <- ddG %>%
filter(Genus == "Viburnum", Mutation %in% c("V475L", "V475I")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "I", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L475I", .before = "Genus")
## Dryopteris
L116S_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116S")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "S", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116S", .before = "Genus")
L116P_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116P")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "P", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116P", .before = "Genus")
L116K_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("M116L", "M116K")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "K", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "L116K", .before = "Genus")
F282Y_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282Y")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "Y", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282Y", .before = "Genus")
F282L_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282L")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "L", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282L", .before = "Genus")
F282I_d <- ddG %>%
filter(Genus == "Dryopteris", Mutation %in% c("H282F", "H282I")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "I", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "F282I", .before = "Genus")
## Pinus
S95T_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("N95S", "N95T")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "T", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "S95T", .before = "Genus")
S95A_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("N95S", "N95A")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "A", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "S95A", .before = "Genus")
C449A_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("T449C", "T449A")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "A", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449A", .before = "Genus")
C449S_p <- ddG %>%
filter(Genus == "Pinus", Mutation %in% c("T449C", "T449S")) %>%
mutate(SD = sum(SD),
AncDer = ifelse(stringr::str_sub(Mutation, -1, -1) == "S", "derived", "ancestral")) %>% ## DERIVED AA
tidyr::pivot_wider(names_from = "AncDer",
values_from = !c("Genus", "SD")) %>%
mutate(across(.cols = contains("_derived") & !contains(c("Mutation", "SD", "AncDer")),
# cur_column gets name of current column, then we replace the _derived suffix. pick uses this string to get the column
# but pick makes the col a df[1x1], so pluck unnests it
.fns = ~ . - pick(cur_column() %>% stringr::str_replace("_derived", "_ancestral")) %>% purrr::pluck(1),
.names = "diff_{.col}")) %>%
select(Genus, SD, contains("diff")) %>%
rename_with(.cols = contains("diff"),
.fn = ~ stringr::str_extract(., "(?<=\\_)[:graph:]+(?=\\_)")) %>%
rename_with(~ stringr::str_remove(., "\\$.*")) %>%
mutate(Mutation = "C449S", .before = "Genus")
neither_spinach <- bind_rows(S95T_v, A328G_v, C449A_v, C449S_v, L475I_v, L116S_d, L116P_d, L116K_d, F282Y_d, F282L_d, F282I_d, S95T_p, S95A_p, C449A_p, C449S_p)
# combine all
subs_v <- readr::read_csv(here::here("analyze/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Viburnum")
subs_d <- readr::read_csv(here::here("dryopteris_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Dryopteris")
subs_l <- readr::read_csv(here::here("limonium_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Limonium")
subs_p <- readr::read_csv(here::here("pine_rubisco/aa_at_sites_ancestral.csv")) %>%
mutate(Genus = "Pinus")
subs <- bind_rows(subs_v, subs_d, subs_l, subs_p) %>%
rowwise() %>%
filter(!AA %in% c(AA_Ancestral, "-")) %>%
distinct(Genus, Site, AA_Ancestral, Site, AA) %>%
mutate(Substitution = paste0(AA_Ancestral, Site, AA)) %>%
select(!contains("AA"))
ddG_all <- bind_rows(ddG, derived_spinach, neither_spinach) %>%
rename(Substitution = Mutation) %>%
right_join(subs) %>%
relocate(Site, .before = "Substitution")
readr::write_csv(ddG_all, here::here("foldx5_1/ddG_values.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
unfill <- function(x) {
same <- x == dplyr::lag(x)
ifelse(!is.na(same) & same, "·", x)
}
here::i_am("rubisco_tables.Rmd")
library(ggplot2)
ggplot2::theme_set(cowplot::theme_cowplot(line_size = 0.25, font_size = 10) +
theme(axis.line = element_blank(),
axis.ticks.length = unit(-3, "pt"),
axis.ticks = element_line(linewidth = 0.25),
strip.background = element_blank(),
strip.placement = "outside",
axis.text.x.top = element_blank(),
axis.text.y.right = element_blank(),
axis.title.x.top = element_blank(),
axis.title.y.right = element_blank()))
H_BONDABLE <- c("S", # OH (hydroxyl)
"T", # OH
"Y", # OH
"N", # CONH2 (amide)
"Q", # CONH2
"C", # SH (thiol) - not really, but can participate in dipole interactions with other thiols
"H", # imidazole ring
"D", # -COO- (carboxylate)
"E", # -COO-
"R", # guanidine
"K") # -NH2 (amine)
# pagel_focused <- readxl::read_xlsx(here::here("table_Pagel_tests.xlsx")) %>%
#   select(Genus, Site, Substitution, FasterAA, StateFavouredbyAA) %>%
#   mutate(across(.cols = c("Genus", "Site"),
#                 .fns = ~ ifelse(. == "·", NA, .))) %>%
#   mutate(Site = as.numeric(Site)) %>%
#   tidyr::fill(Genus, Site) %>%
#   mutate(AA = stringr::str_sub(Substitution, 1, 1),
#          AA_Ancestral = stringr::str_sub(Substitution, -1, -1)) %>%
#   mutate(AA_HBondable = ifelse(AA %in% H_BONDABLE, TRUE, FALSE),
#          AA_A_HBondable = ifelse(AA_Ancestral %in% H_BONDABLE, TRUE, FALSE),
#          BondableChange = case_when(AA_HBondable == FALSE & AA_A_HBondable == TRUE ~ "Removed",
#                                     AA_HBondable == TRUE & AA_A_HBondable == FALSE ~ "Added",
#                                     .default = "None"),
#          .keep = "unused")
foldx <- readr::read_csv(here::here("foldx5_1/ddG_values.csv")) %>%
mutate(Substitution = stringr::str_replace(Substitution, "([:alpha:][:digit:]+)(.+)", "\\1→\\2")) %>%
mutate(AA_Ancestral = stringr::str_sub(Substitution, 1, 1),
AA = stringr::str_sub(Substitution, -1, -1)) %>%
mutate(AA_HBondable = ifelse(AA %in% H_BONDABLE, TRUE, FALSE),
AA_A_HBondable = ifelse(AA_Ancestral %in% H_BONDABLE, TRUE, FALSE),
BondableChange = case_when(AA_HBondable == FALSE & AA_A_HBondable == TRUE ~ "Removed",
AA_HBondable == TRUE & AA_A_HBondable == FALSE ~ "Added",
.default = "None"),
.keep = "unused")
foldx_focused <- foldx %>%
rename(Total = totalenergy,
`Hydrogen bonds` = HBond,
`Solvation, polar` = SolvationPolar,
`Solvation, hydrophobic` = SolvationHydrophobic) %>%
filter(!is.na(Total)) %>%
tidyr::pivot_longer(cols = c("Total", "Hydrogen bonds", "Clashes", "VanderWaals", "Electrostatics", "Solvation, polar", "Solvation, hydrophobic"),
names_to = "Parameter",
values_to = "Value") %>%
mutate(Value = Value / 8) # normalize per L subunit
COMPONENTS <- c("Total", "Hydrogen bonds", "Solvation, polar", "Solvation, hydrophobic")
residues <- foldx_focused %>%
group_by(Parameter, BondableChange) %>%
rstatix::t_test(Value ~ 1, mu = 0,
p.adjust.method = "fdr") %>%
rstatix::add_y_position(step.increase = 0.04) %>%
mutate(p.signif = case_when(p < 0.001 ~ "***",
p < 0.01 ~ "**",
p < 0.05 ~ "*")) %>%
filter(Parameter %in% COMPONENTS) %>%
mutate(Tag = case_when(Parameter == "Hydrogen bonds" ~ "A",
Parameter == "Solvation, hydrophobic" ~ "B",
Parameter == "Solvation, polar" ~ "C",
Parameter == "Total" ~ "D"))
foldx_fig <- foldx_focused %>%
full_join(residues) %>%
filter(Parameter %in% COMPONENTS) %>%
ggplot(aes(x = BondableChange, y = Value)) +
geom_hline(aes(yintercept = 0),
linetype = "dotted",
linewidth = 0.25) +
ggbeeswarm::geom_quasirandom(width = 0.25,
size = 0.5,
shape = 21) +
stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - qnorm(0.975)*sd(x)/sqrt(length(x)),
fun.ymax = function(x) mean(x) + qnorm(0.975)*sd(x)/sqrt(length(x)),
geom = "pointrange",
position = position_nudge(x = 0.4),
size = 0.25,
linewidth = 0.4,
fatten = 2) +
geom_text(aes(y = y.position,
label = p.signif),
data = residues,
size = 6,
fontface = "bold") +
geom_text(aes(label = Tag, x = -Inf, y = Inf),
hjust = -0.5, vjust = 1.5,
fontface = "bold") +
labs(x = "Changes in oxygen, nitrogen, and/or sulfur atoms",
y = bquote(atop("← more stable       less stable →",
Delta*Delta*italic("G")~"(kcal "*mol^-1~large~subunit^-1*")"))) +
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0))) +
cowplot::panel_border(color = "black", size = 0.5) +
coord_cartesian(clip = "off") +
# ggpubr::stat_pvalue_manual(residues %>% filter(Parameter %in% COMPONENTS),
#                            label = "label",
#                            tip.length = 0.02,
#                            hide.ns = FALSE) +
facet_grid(~ factor(Parameter))
ggsave(here::here("figure_FoldX.tif"), foldx_fig, width = 6.5, height = 2.5, bg = "white", dpi = 1000)
residues
View(residues)
residues <- foldx_focused %>%
group_by(Parameter, BondableChange) %>%
rstatix::t_test(Value ~ 1, mu = 0,
p.adjust.method = "fdr") %>%
rstatix::add_y_position(step.increase = 0.04) %>%
mutate(p.signif = case_when(p < 0.001 ~ "***",
p < 0.01 ~ "**",
p < 0.05 ~ "*"))
View(residues)
